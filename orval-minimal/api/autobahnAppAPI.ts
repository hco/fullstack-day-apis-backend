/**
 * Generated by orval v6.14.4 üç∫
 * Do not edit manually.
 * Autobahn App API
 * Was passiert auf Deutschlands Bundesstra√üen? API f√ºr aktuelle Verwaltungsdaten zu Baustellen, Staus und Ladestationen. Au√üerdem Zugang zu Verkehrs√ºberwachungskameras und vielen weiteren Datens√§tzen.

 * OpenAPI spec version: 1.0.1
 */
import { customInstance } from '../axios';
export type ElectricChargingStation = RoadItem;

export interface ElectricChargingStations {
  electric_charging_station?: ElectricChargingStation[];
}

export type Closure = RoadEvent;

export interface Closures {
  closure?: Closure[];
}

export type Warning = RoadEvent;

export interface Warnings {
  warning?: Warning[];
}

export type ParkingLorry = RoadItem;

export interface ParkingLorries {
  parking_lorry?: ParkingLorry[];
}

export type WebcamAllOf = {
  operator?: string;
  imageurl?: string;
  linkurl?: string;
};

export type Webcam = RoadItem & WebcamAllOf;

export interface Webcams {
  webcam?: Webcam[];
}

export type Roadwork = RoadEvent;

export interface Roadworks {
  roadworks?: Roadwork[];
}

export type RoadEventAllOf = {
  startTimestamp?: string;
};

export type RoadItemRouteRecommendationItem = { [key: string]: any };

export interface LorryParkingFeatureIcon {
  icon?: string;
  description?: string;
  style?: string;
}

export type DisplayType = typeof DisplayType[keyof typeof DisplayType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DisplayType = {
  ROADWORKS: 'ROADWORKS',
  WEBCAM: 'WEBCAM',
  PARKING: 'PARKING',
  WARNING: 'WARNING',
  WEIGHT_LIMIT_35: 'WEIGHT_LIMIT_35',
  CLOSURE: 'CLOSURE',
  CLOSURE_ENTRY_EXIT: 'CLOSURE_ENTRY_EXIT',
  STRONG_ELECTRIC_CHARGING_STATION: 'STRONG_ELECTRIC_CHARGING_STATION',
  SHORT_TERM_ROADWORKS: 'SHORT_TERM_ROADWORKS',
  ELECTRIC_CHARGING_STATION: 'ELECTRIC_CHARGING_STATION',
} as const;

/**
 * Sinnbild, das die Art des Eintrags beschreibt. Gr√∂√ütenteils sind diese dem offiziellen Verkehrszeichenkatalog entnommen, teilweise allerdings mit abweichender Bedeutung und/oder nicht offiziellen Unternummern. Wo kein passendes Verkehrszeichen existiert, werden nicht-numerische Werte verwendet:
<ul>
<li>101: Gefahr</li>
<li>123: Bauarbeiten</li>
<li>250: Sperrung</li>
<li>262-2: Max. 3,5t</li>
<li>314-50: Park-/Rastplatz (Pkw/Lkw)</li>
<li>314-50-2: Park-/Rastplatz (nur Pkw)</li>
<li>448: Anschlussstelle gesperrt</li>
<li>charging_plug_strong: Schnellladestation f√ºr E-Fahrzeuge</li>
<li>warnkegel: Kurzzeitbaustelle</li>
</ul>

 */
export type IconRef = string;

export type MultilineText = string[];

export type Identifier = string;

export interface RoadItem {
  extent?: Extent;
  identifier?: Identifier;
  routeRecommendation?: RoadItemRouteRecommendationItem[];
  coordinate?: Coordinate;
  footer?: MultilineText;
  icon?: IconRef;
  isBlocked?: string;
  description?: MultilineText;
  title?: string;
  point?: Point;
  display_type?: DisplayType;
  lorryParkingFeatureIcons?: LorryParkingFeatureIcon[];
  future?: boolean;
  subtitle?: string;
}

export type RoadEvent = RoadItem & RoadEventAllOf;

export type LatLongValue = string;

export interface Coordinate {
  lat?: LatLongValue;
  long?: LatLongValue;
}

export type Point = string;

export type Extent = string;

export type RoadId = string;

export interface Roads {
  roads?: RoadId[];
}




// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;


  /**
 * Gibt eine Liste der verf√ºgbaren Autobahnen zur√ºck.
 * @summary Liste verf√ºgbarer Autobahnen
 */
export const listAutobahnen = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Roads>(
      {url: `/`, method: 'get'
    },
      options);
    }
  
/**
 * Gibt eine Liste der aktuellen Baustellen zu einer Autobahn zur√ºck.
 * @summary Liste aktueller Baustellen
 */
export const listRoadworks = (
    roadId: RoadId,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Roadworks | void>(
      {url: `/${roadId}/services/roadworks`, method: 'get'
    },
      options);
    }
  
/**
 * Gibt Details zu einer konkreten Baustelle zur√ºck.
 * @summary Details einer Baustelle
 */
export const getRoadwork = (
    roadworkId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Roadwork | void>(
      {url: `/details/roadworks/${roadworkId}`, method: 'get'
    },
      options);
    }
  
/**
 * Gibt eine Liste der Webcams zu einer Autobahn zur√ºck.
 * @summary Liste verf√ºgbarer Webcams
 */
export const listWebcams = (
    roadId: RoadId,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Webcams | void>(
      {url: `/${roadId}/services/webcam`, method: 'get'
    },
      options);
    }
  
/**
 * Gibt Details einer konkreten Webcam zur√ºck.
 * @summary Details einer Webcam
 */
export const getWebcam = (
    webcamId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Webcam | void>(
      {url: `/details/webcam/${webcamId}`, method: 'get'
    },
      options);
    }
  
/**
 * Gibt eine Liste der Rastpl√§tze zu einer Autobahn zur√ºck.
 * @summary Liste verf√ºgbarer Rastpl√§tze
 */
export const listParkingLorries = (
    roadId: RoadId,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ParkingLorries | void>(
      {url: `/${roadId}/services/parking_lorry`, method: 'get'
    },
      options);
    }
  
/**
 * Gibt Details eines konkreten Rastplatzes zur√ºck.
 * @summary Details eines Rastplatzes
 */
export const getParkingLorry = (
    lorryId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ParkingLorry | void>(
      {url: `/details/parking_lorry/${lorryId}`, method: 'get'
    },
      options);
    }
  
/**
 * Gibt eine Liste der Verkehrsmeldungen zu einer Autobahn zur√ºck.
 * @summary Liste aktueller Verkehrsmeldungen
 */
export const listWarnings = (
    roadId: RoadId,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Warnings | void>(
      {url: `/${roadId}/services/warning`, method: 'get'
    },
      options);
    }
  
/**
 * Gibt Details zu einer konkreten Verkehrsmeldung zur√ºck.
 * @summary Details zu einer Verkehrsmeldung
 */
export const getWarning = (
    warningId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Warning | void>(
      {url: `/details/warning/${warningId}`, method: 'get'
    },
      options);
    }
  
/**
 * Gibt eine Liste der Sperrungen zu einer Autobahn zur√ºck.
 * @summary Liste aktueller Sperrungen
 */
export const listClosures = (
    roadId: RoadId,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Closures | void>(
      {url: `/${roadId}/services/closure`, method: 'get'
    },
      options);
    }
  
/**
 * Gibt Details zu einer konkreten Sperrung zur√ºck.
 * @summary Details zu einer Sperrung
 */
export const getClosure = (
    closureId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Closure | void>(
      {url: `/details/closure/${closureId}`, method: 'get'
    },
      options);
    }
  
/**
 * Gibt eine Liste der Ladestationen zu einer Autobahn zur√ºck.
 * @summary Liste aktueller Ladestationen
 */
export const listChargingStations = (
    roadId: RoadId,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ElectricChargingStations | void>(
      {url: `/${roadId}/services/electric_charging_station`, method: 'get'
    },
      options);
    }
  
/**
 * Gibt Details zu einer konkreten Ladestation zur√ºck.
 * @summary Details zu einer Ladestation
 */
export const getChargingStation = (
    stationId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ElectricChargingStation | void>(
      {url: `/details/electric_charging_station/${stationId}`, method: 'get'
    },
      options);
    }
  

type AwaitedInput<T> = PromiseLike<T> | T;

    type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type ListAutobahnenResult = NonNullable<Awaited<ReturnType<typeof listAutobahnen>>>
export type ListRoadworksResult = NonNullable<Awaited<ReturnType<typeof listRoadworks>>>
export type GetRoadworkResult = NonNullable<Awaited<ReturnType<typeof getRoadwork>>>
export type ListWebcamsResult = NonNullable<Awaited<ReturnType<typeof listWebcams>>>
export type GetWebcamResult = NonNullable<Awaited<ReturnType<typeof getWebcam>>>
export type ListParkingLorriesResult = NonNullable<Awaited<ReturnType<typeof listParkingLorries>>>
export type GetParkingLorryResult = NonNullable<Awaited<ReturnType<typeof getParkingLorry>>>
export type ListWarningsResult = NonNullable<Awaited<ReturnType<typeof listWarnings>>>
export type GetWarningResult = NonNullable<Awaited<ReturnType<typeof getWarning>>>
export type ListClosuresResult = NonNullable<Awaited<ReturnType<typeof listClosures>>>
export type GetClosureResult = NonNullable<Awaited<ReturnType<typeof getClosure>>>
export type ListChargingStationsResult = NonNullable<Awaited<ReturnType<typeof listChargingStations>>>
export type GetChargingStationResult = NonNullable<Awaited<ReturnType<typeof getChargingStation>>>
